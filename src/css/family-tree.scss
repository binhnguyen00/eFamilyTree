@use "./variables" as *;
@use "./app.scss" as *;
@use "./theme.scss" as *;

.tree-container {
  padding-top: calc(var(--zaui-safe-area-inset-top, 0px) + $header-height) !important;
  padding-left: unset !important;
  padding-right: unset !important;
  padding-bottom: calc(var(--zaui-safe-area-inset-bottom, 0px) + ($footer-height + 10px)) !important;
  background-color: var(--tree-background-color) !important;

  @extend .text-base;

  @media (min-width: 640px) {
    max-width: 100%;
  }
}

.tree-connector {
  background-color: $primary-color;
  pointer-events: none;
  stroke-linecap: round;
  border-radius: 2rem;
}

.tree-node {
  position: absolute;
  padding: 15px;
  border-radius: $node-border-radius;
}

.tree-node-root {
  background: #6f747e;
}

.tree-node-male {
  background: linear-gradient(to bottom, $node-male-color 25%, #fef3e2 25%);
  border: 2px solid $node-border-color;
  position: relative;
  color: $node-male-color !important;
  overflow-wrap: break-word !important;
  border-radius: $node-border-radius;

  &::before {
    content: '';         
    position: absolute;
    top: 0;              
    left: 0;
    width: 100%;         
    height: 25%;         
    background: $node-male-color;
    border-radius: $node-border-radius;
  }
}

.tree-node-female {
  background: linear-gradient(to bottom, $node-female-color 25%, #fef3e2 25%);
  position: relative;
  color: $node-female-color !important;
  border: 2px solid $node-border-color;
  overflow-wrap: break-word !important;
  border-radius: $node-border-radius;
  text-wrap: wrap;

  &::before {
    content: '';         
    position: absolute;
    top: 0;              
    left: 0;
    width: 100%;         
    height: 25%;         
    background: $node-female-color;
    border-radius: $node-border-radius;
  }
}

// override react-zoom-pan-pinch css
.react-transform-wrapper {
  height: inherit !important;
  width: unset !important;
}

// override react-zoom-pan-pinch css
.react-transform-component {
  height: inherit !important;
}